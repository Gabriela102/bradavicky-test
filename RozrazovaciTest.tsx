import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { motion } from "framer-motion";

const questions = [
  {
    question: "Co bys udƒõlal/a, kdybys zahl√©dl/a, ≈æe nƒõkdo podv√°d√≠ bƒõhem kouzelnick√© zkou≈°ky?",
    answers: [
      "Sna≈æil/a bych se mu pomoct, ale nen√°padnƒõ.",
      "Ozn√°mil/a bych to, i kdyby to bylo tƒõ≈æk√©.",
      "Zamyslel/a bych se, proƒç to dƒõl√°, a pozoroval/a d√°l.",
      "Vyu≈æil/a bych toho ve sv≈Øj prospƒõch.",
    ]
  },
  {
    question: "Kdybys mƒõl/a mo≈ænost z√∫ƒçastnit se nebezpeƒçn√©, ale slavn√© soutƒõ≈æe, ≈°el/≈°la bys do toho?",
    answers: [
      "Ne, d√°m p≈ôednost klidu a bezpeƒç√≠.",
      "Pokud bych z toho mohl/a nƒõco z√≠skat, tak urƒçitƒõ.",
      "Jen pokud bych byl/a dob≈ôe p≈ôipraven√°.",
      "Ano, miluju v√Ωzvy!",
    ]
  },
  {
    question: "Jak bys popsal/a sv√© studijn√≠ n√°vyky?",
    answers: [
      "Miluju uƒçen√≠ a sb√≠r√°n√≠ nov√Ωch znalost√≠.",
      "Dƒõl√°m to, co mus√≠m, ale poctivƒõ.",
      "Uƒç√≠m se, pokud to slou≈æ√≠ m√Ωm c√≠l≈Øm.",
      "Nevyhled√°v√°m to, ale p≈ôek√°≈æky mƒõ neodrad√≠.",
    ]
  },
  {
    question: "Kdybys na≈°el/a tajn√Ω vchod, co udƒõl√°≈°?",
    answers: [
      "Nejprve bych si v≈°e promyslel/a a zjistil/a, kam vede.",
      "Neprodlenƒõ bych to nahl√°sil/a profesorovi.",
      "Vlezl/a bych dovnit≈ô, abych objevil/a, co se skr√Ωv√° uvnit≈ô.",
      "Zv√°≈æil/a bych, jak√Ω u≈æitek z toho mohu m√≠t.",
    ]
  },
  {
    question: "Jak ≈ôe≈°√≠≈° konflikt se spolu≈æ√°kem?",
    answers: [
      "Sna≈æ√≠m se to vy≈ôe≈°it spravedlivƒõ a m√≠rumilovnƒõ.",
      "P≈ôem√Ω≈°l√≠m strategicky a chci z toho vyj√≠t jako v√≠tƒõz.",
      "Budu se ≈ô√≠dit sv√Ωm instinktem a chr√°nit slab≈°√≠.",
      "Sna≈æ√≠m se pochopit jeho motivaci a diskutovat.",
    ]
  },
  {
    question: "Jak bys reagoval/a, kdybys mƒõl/a mo≈ænost z√≠skat zak√°zan√© znalosti?",
    answers: [
      "Z√°vis√≠ na tom, zda by to mohlo pomoci ostatn√≠m.",
      "Radƒõji bych je nechal/a b√Ωt, nen√≠ to spr√°vn√©.",
      "Pokud to pos√≠l√≠ mou pozici, vyu≈æiji je.",
      "Zkoumal/a bych je ƒçistƒõ ze zvƒõdavosti.",
    ]
  },
  {
    question: "Jak√Ω typ √∫kol≈Ø m√°≈° nejradƒõji?",
    answers: [
      "Ty, kter√© jsou spravedliv√© a zahrnuj√≠ t√Ωmovou pr√°ci.",
      "Ty, kter√© mi d√°vaj√≠ prostor pro kreativn√≠ ≈ôe≈°en√≠.",
      "Ty, kde mohu b√Ωt prvn√≠ a nej√∫spƒõ≈°nƒõj≈°√≠.",
      "Ty, kter√© mƒõ nut√≠ se nƒõco nauƒçit.",
    ]
  },
  {
    question: "Jak bys reagoval/a, kdyby nƒõkdo ur√°≈æel tv√© p≈ô√°tele?",
    answers: [
      "Zastanu se jich, i kdybych mƒõl/a probl√©my.",
      "Najdu zp≈Øsob, jak se dotyƒçn√©mu postavit chyt≈ôe.",
      "Pomohu p≈ô√°tel≈Øm se s t√≠m vyrovnat.",
      "Navrhnu spoleƒçn√© ≈ôe≈°en√≠ bez konfliktu.",
    ]
  },
  {
    question: "Kter√° kouzelnick√° vlastnost je ti nejbli≈æ≈°√≠?",
    answers: [
      "Loajalita",
      "Vƒõdƒõn√≠",
      "Odvaha",
      "Ambice",
    ]
  },
  {
    question: "Jak√Ω p≈ôedmƒõt v Bradavic√≠ch by tƒõ nejv√≠c zaj√≠mal?",
    answers: [
      "Obrana proti ƒçern√© magii",
      "Lektvary a alchymie",
      "P√©ƒçe o kouzeln√© tvory",
      "Vƒõ≈°tƒõn√≠ budoucnosti a starod√°vn√° moudrost",
    ]
  },
];

const answerValues = [
  [[1, 0, 0, 3], [3, 0, 0, 0], [0, 1, 2, 0], [0, 3, 0, 0]],
  [[0, 0, 0, 3], [0, 3, 0, 0], [0, 0, 3, 0], [3, 0, 0, 0]],
  [[0, 0, 3, 0], [1, 0, 0, 3], [0, 3, 0, 0], [3, 0, 1, 0]],
  [[2, 0, 2, 0], [3, 0, 0, 0], [3, 0, 0, 1], [0, 3, 0, 0]],
  [[3, 0, 0, 3], [0, 3, 0, 0], [3, 0, 0, 1], [1, 1, 3, 0]],
  [[2, 1, 0, 3], [3, 0, 0, 0], [0, 3, 0, 0], [0, 0, 3, 1]],
  [[3, 0, 0, 3], [2, 0, 3, 0], [0, 3, 0, 0], [0, 0, 3, 1]],
  [[3, 0, 0, 2], [0, 3, 1, 0], [1, 0, 3, 0], [0, 0, 1, 3]],
  [[3, 0, 0, 3], [0, 0, 3, 0], [0, 0, 0, 3], [0, 3, 0, 0]],
  [[3, 0, 1, 0], [0, 3, 0, 0], [0, 0, 1, 3], [1, 1, 3, 0]],
];

export default function RozrazovaciTest() {
  const [step, setStep] = useState(-1);
  const [username, setUsername] = useState("");
  const [answers, setAnswers] = useState([]);
  const [result, setResult] = useState(null);

  const handleAnswer = (index: number) => {
    const updatedAnswers = [...answers, index];
    setAnswers(updatedAnswers);
    if (step + 1 < questions.length) {
      setStep(step + 1);
    } else {
      const scores = { Gryffindor: 0, Slytherin: 0, Ravenclaw: 0, Hufflepuff: 0 };
      updatedAnswers.forEach((answer, i) => {
        const [g, s, r, h] = answerValues[i][answer];
        scores.Gryffindor += g;
        scores.Slytherin += s;
        scores.Ravenclaw += r;
        scores.Hufflepuff += h;
      });
      const sorted = Object.entries(scores).sort((a, b) => b[1] - a[1]);
      setResult(sorted[0][0]);
      sendResultEmail(username, sorted);
    }
  };

  const sendResultEmail = async (name: string, sortedScores: [string, number][]) => {
    await fetch("/api/send-email", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name, result: sortedScores[0][0], scores: sortedScores })
    });
  };

  return (
    <div className="min-h-screen bg-cover bg-center p-6 flex flex-col items-center justify-center" style={{ backgroundImage: 'url(/hogwarts-hall.jpg)' }}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="max-w-xl w-full"
      >
        <Card className="bg-white/80 backdrop-blur-xl p-6 rounded-2xl shadow-2xl">
          <CardContent>
            {step === -1 && (
              <div className="space-y-4">
                <h2 className="text-2xl font-bold text-center">‚ú® Kouzeln√Ω ritu√°l roz≈ôazen√≠ ‚ú®</h2>
                <p className="text-sm text-center">Zadej sv√© hern√≠ jm√©no a vstup do Velk√© s√≠nƒõ...</p>
                <Input placeholder="Tv√© hern√≠ jm√©no" value={username} onChange={(e) => setUsername(e.target.value)} />
                <Button onClick={() => setStep(0)} disabled={!username} className="w-full">Zaƒç√≠t ritu√°l</Button>
              </div>
            )}

            {step >= 0 && step < questions.length && (
              <div className="space-y-6">
                <h3 className="text-lg font-bold">{questions[step].question}</h3>
                {questions[step].answers.map((ans, idx) => (
                  <Button key={idx} onClick={() => handleAnswer(idx)} variant="outline" className="w-full text-left">
                    {String.fromCharCode(65 + idx)}) {ans}
                  </Button>
                ))}
              </div>
            )}

            {result && (
              <div className="text-center space-y-4">
                <h2 className="text-2xl font-bold">üéâ Roz≈ôazen√≠ dokonƒçeno!</h2>
                <p>Student <strong>{username}</strong> byl za≈ôazen do koleje:</p>
                <p className="text-3xl font-bold">{result}</p>
                <p className="text-sm">(Kopie v√Ωsledku byla odesl√°na organiz√°torovi.)</p>
              </div>
            )}
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
}
